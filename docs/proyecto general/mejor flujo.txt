1. Interfaz de entrada (CLI / gRPC / REST)  
   └─>  Recibe comando: `execute_arbitrage --strategy triangular --notional 10k`

2. Capa de aplicación  (Use-Case = ExecuteArbitrage)  
   ├─ Valida parámetros básicos (DTO → VO)  
   ├─ Orquesta dependencias:  
   │     • PriceFeedPort        (contrato)  
   │     • OrderRepositoryPort  (puerto)  
   │     • PortfolioRepositoryPort  
   │     • EventDispatcherPort
   └─> Llama a dominio

3. Dominio – Servicio `pricing::quote_spread()`  
   ├─ Construye `Symbol` y `Spread` (ValueObjects)  
   └─> Solicita precios al PriceFeedPort

4. PriceFeed Adapter (infra/okx | infra/ibkr)  
   ├─ Traduce llamada a REST/WS propio del broker  
   ├─ Parseo JSON → VO `Money`  
   └─> Devuelve cotizaciones a la capa de aplicación

5. Dominio – Servicio `risk::check_exposure()`  
   ├─ Carga `Portfolio` agregado con positions abiertas  
   └─> Si pasa, continúa; si no, error DomainError::RiskLimitExceeded

6. Dominio – Agregado `Portfolio::place_order()`  
   ├─ Crea entidad `Order` con ID único  
   ├─ Aplica Specification `ValidSpread`  
   ├─ Actualiza su estado interno (bloquea saldo)  
   └─ Emite evento de dominio `OrderCreated`

7. Capa de aplicación  
   ├─ Persiste Order mediante `OrderRepositoryPort`  
   ├─ Persiste Portfolio mediante `PortfolioRepositoryPort`  
   └─> Publica eventos en EventDispatcherPort

8. Event Dispatcher (infraestructura)  
   ├─ Mapea `OrderCreated` → DTO/JSON para broker  
   ├─ Envía orden al exchange vía SDK/API  
   └─ Inscribe callback/WS para estado de la orden

9. Broker (OKX / IBKR / …)  
   └─> Ejecuta la orden y responde fill parcial/total

10. Adapter de broker – Callback/WebSocket  
    ├─ Convierte fill → entidad `Trade`  
    ├─ Llama a PortfolioRepository para cargar y aplicar `Portfolio::register_trade()`  
    ├─ Persiste Trade y Portfolio actualizados  
    └─ Publica evento `OrderFilled`

11. Dominio – Reacción al evento `OrderFilled`  
    ├─ Servicio `risk::recalc_metrics()` → actualiza VAR, PnL, límites  
    └─ Puede disparar `HedgeNeeded` o `ProfitTaken` según estrategia

12. Capa de aplicación  
    └─ Envía notificación al CLI / Dashboard (“Order #123 filled @ 25 000 USDT”)

13. Observabilidad & Auditing  
    ├─ EventDispatcher duplica evento a un Topic Kafka/RedPanda  
    └─ Logs estructurados + métricas Prometheus

┌────────────┐           puertos (traits)           ┌────────────────────────┐
│ APLICACIÓN │  <------------------------------->  │ INFRAESTRUCTURA ADAPT. │
└────────────┘           contratos (DTOs)           └────────────────────────┘
          ^                                             |
          | (solo invoca)                               v (side-effects)
┌─────────────────┐                              ┌─────────────────────────┐
│   DOMINIO PURO  │ <— entidades/VOs/servicios — │   EXTERNAL BROKERS      │
└─────────────────┘                              └─────────────────────────┘
