dominio/                               # Crate raíz (dominio puro de la app)
├── Cargo.toml                         # Manifest de Rust: deps, features, workspace
└── src
    ├── lib.rs                         # Punto de entrada del crate; re-exporta módulos
    ├── prelude.rs                     # Atajo de imports comunes (VOs, entidades, errores…)
    ├── errors/                        # Jerarquía de errores de dominio
    │   ├── mod.rs                     # Re-exporta submódulos de errores
    │   └── domain_error.rs            # Tipo DomainError + helpers
    ├── value_objects/                 # Objetos de Valor (inmutables, sin identidad)
    │   ├── mod.rs                     # Declara y expone los VOs
    │   ├── prelude.rs                 # Re-export rápido de VOs más usados
    │   ├── money.rs                   # Representa cantidades monetarias
    │   └── …                          # Otros VOs (Quantity, Symbol, Spread…)
    ├── entities/                      # Entidades con identidad propia
    │   ├── mod.rs                     # Índice de entidades
    │   ├── order.rs                   # Modelo de Order (órdenes)
    │   ├── builders.rs                # Factories/builders para entidades complejas
    │   └── …                          # Resto (Trade, Instrument, BrokerAccount…)
    ├── aggregates/                    # Aggregates Roots y consistencia transaccional
    │   ├── mod.rs                     # Re-exporta agregados
    │   ├── portfolio.rs               # AggregateRoot: cartera con posiciones
    │   └── strategy.rs                # (Ej.) Aggregate para estrategias de trading
    ├── services/                      # Servicios del dominio (lógica pura, sin IO)
    │   └── domain/                    # ⇢ Separados de la capa de aplicación
    │       ├── mod.rs                 # Re-exporta servicios de dominio
    │       ├── pricing.rs             # Cálculo de precios/mark-to-market
    │       └── risk.rs                # Cálculo de riesgo/exposición
    ├── specifications/                # Reglas reutilizables (Specification Pattern)
    │   └── …                          # Ej. ValidSpread, MaxPositionSize…
    ├── policies/                      # Domain Policies (reglas que cruzan entidades/VOs)
    ├── events/                        # Eventos de dominio
    │   ├── mod.rs                     # Índice de eventos
    │   ├── order_filled.rs            # Evento OrderFilled
    │   └── dispatcher.rs              # Trait + impl para despachar eventos
    ├── repositories/                  # Interfaces de persistencia (puertos salientes)
    │   ├── mod.rs                     # Re-exporta traits de repositorios
    │   └── order_repository.rs        # Contract para OrderRepository
    ├── contracts/                     # Interfaces hacia otros BCs/gateways
    │   ├── mod.rs                     # Re-exporta contracts
    │   └── price_feed.rs              # Ej. contract de PriceFeed
    └── tests/                         # Pruebas de integración / BDD del dominio
